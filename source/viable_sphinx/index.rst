================================================
Sphinxのドキュメントを作りたくなってしまうしくみ
================================================

------------------
他のツールとの比較
------------------

ドキュメントを書くツールにはさまざまなものがあります。以下のようなもののうち、何を使用しているでしょうか？

* Word(OpenOffice, 一太郎)
* PowerPoint
* Excel
* HTML直書き
* Wiki
* Sphinx
* TeX
* その他

ここでは、このなかの、Word/Excel/Wiki/Sphinxの4つを選び、メタファーを交えながら比較して、なぜSphinxが成長するドキュメントに適しているのか、他の物が適さないのかという説明をしていきます。ただし、Sphinxの良い所ばかりを取り上げて、他の選択肢を貶めるようなことはしないように心がけます。

Word
====

.. image:: images/eel.jpg
   :width: 450pt

`photo <http://www.flickr.com/photos/boothy/26461481/>`_ CC BY-NC by Dr Snafu

まずはWordです。Wordはドキュメント専用ツールです。Wordの優れている点は次の通りです。

* 縦書きに対応。知り合いの小説家の人はWordを使っていました。
* 日本語の文法チェックをしてくれます。商業レベルの文章を書くときに利用したり。
* 単語単位の差分機能。編集の人と、変更箇所や指摘をやりとりする際に便利でした。
* 論文、小説など、大きく構造を並び替えたりせず、文章の位置関係が比較的早期に決まるような長文の文章には適しています。
* 参考文献とか索引も作れます。あとは差し込み印刷などもできます。

.. images:: images/unagi_pi.jpg
   :width: 300pt

`photo <http://www.flickr.com/photos/jetalone/861945664/>`_ CC BY by jetalone

欠点としては、シーケンシャルな流れを直接扱うことは得意ですが、その分大きい文章の並び替えとかは大変です。1ファイルで構成されているため、複数人でいじるのも大変です。

Excel
=====

.. images:: images/crab.jpg
   :width: 450pt

`photo <http://www.flickr.com/photos/21183810@N00/4366518191/>`_ CC BY-NC-SA by Jerome Rothermund

Excelは枠さえ決まっていれば、多少中身が適当でもカッコがつきます。初期の作成コストは意外と低く、縦横の枠を使って整理できる。ある意味、ロジカルシンキングができない人でもなんとなく構造化されたドキュメントができるという特徴があります。

Excelが悲惨なのは、２次改修や再利用。枠に収まらなくなって、ちょっとセルを調整したくなったりすると調整に時間がかかるという点です。また、四角とか丸とか絵を書いた場合も、ちょっと追加しよう、でも枠に収まらない(> <)ということになると、修正に手間がかかります。全ページ(横断)で印刷がしにくい。ワークシートの数が5を超えると閲覧性が落ちます。

.. images:: images/crab2.jpg
   :width: 450pt

`photo <http://www.flickr.com/photos/omeyamapyonta/3052096093/>`_ CC BY-SA by PYONKO

そもそもExcelはドキュメント作成ツールではありません。表計算兼簡易データベース。CSVがあんまりにも貧弱というのはありますが、ある程度フォーマットの決まったデータをやり取りする中間フォーマットとしては結構便利だったりもします。また、使える人が多いのもメリットです。数値的なデータを要求されたら、Excel形式でとりあえず渡して置けば、集計とかはユーザが勝手にやってくれちゃったりします。

Wiki
====

自由自在に広がっていくことができます。WikiPediaでページを色々たどっているうちに、かなり時間をロスしてしまったという、経験をお持ちの人もいると思います。カオスな、複雑な情報も扱うことができます。いくらでも情報を結びつけて、深めていくことができます。詳しくは、『パターン、Wiki、XP』(江渡さん)を。

Wikiはトップダウンのツリー型ではなく、有機的な情報のネットワークである、セミラティス構造をしているという特徴があります。完全に、分類しにくい情報などを、そのまま入れていくことができます。例えば、次のようなデータがあったとします。

* VW ゴルフトゥーラン
* BMW 3シリーズ
* ホンダ オデッセイ
* 日産 スカイライン

例えば、セダン、ミニバン、というのを上位概念として置けば、ゴルフとオデッセイが同じ枠に、3シリーズとスカイラインが同じ枠に入ります。また、国産車か、輸入車か、という分類をすれば違う分類になります。ロジカルシンキングというのも、目的が変われば分類が変わります。Wikiであれば、そのまま入れてしまい、そこにリンクするページ(切り口)を複数用意する、ということも可能です。

一方、自由故に、文章の構成、内容の質などの統一性を図るのが難しいという欠点があります。WikiPediaのように、だれかが基本骨格を作って、その中に書いていく、などの対処が必要になってくるでしょう。。そろそろ、Wiki従事者認定試験とかWiki管理者認定試験とかできてもいいころかと。

また、Webアプリケーションである、というのも、他とは異なります。

Sphinx
======

きとんとした背骨があり、大きく成長しても、基本骨格を維持しながら、骨の周りに肉付けがされて大きくなっていくことができます。体が大きくなっても、そのままの構造で大きくしていくことができる。骨格は決まっているので、Wikiとは違って、新しい情報をどこでも自由にぱっと追加することはできず、入れる位置を熟考する必要があります。

プレーンテキストなので、ツールを使って、差分をきれいに見ることが可能です。SVNでもgitでもhgでも、バージョン管理をしているのであれば、その環境に合わせることができます。ソースコードと一緒に入れるのがおすすめです。

--------------------------------
成長しやすいドキュメントのヒミツ
--------------------------------

Sphinxの「成長しやすいドキュメントの秘密」は、次の2点に分けられます。

* 背骨
* 神経のネットワーク

これらについて説明を行っていきます。

背骨
====

C言語だとincludeみたいな感じで、自分の子供を記述していきます。toctreeさえわかればSphinx初段です。

水平方向に伸ばすことが可能です。また、上から見た時の見た目を変えずに、下部をリファクタリングして複数のドキュメントに和けたりもできます。ポインタ情報のみなので、順番を入れ替えたりすることが簡単に行えます。つまみぐい勉強法という本でも、書きすぎた内容を削ったり、大幅に章構成を整理したり、ということを何度か行いましたが、結構短時間で行うことができました。

全体構造を見る俯瞰視点(TOCツリー)と、詳細を見て行く集中モードの、二つの視点を行き来しながら、どんどん書いていけます。俯瞰視点のおかげで、ロジカルツリー状の構造にすることができ、大分類から小分類へ、ということがきちんと整理できるようになります。目次だけ見てみたい場合には、まずはタイトルだけのページを作り、ツリーを眺めてみれば良いでしょう。

集中モードでは、単独のウェブページを作る感覚でどんどん書いていけます。この2つの視点を切り替えていくことで、さまざまなフィードバックを受けて、ドキュメントを改善していけます。ドキュメントの読みやすさには次の2種類があると思います。Sphinxであれば、この両方のメリットを持つ、ハイブリッドなドキュメントを作ることができます。

* ロジカルツリー＝紙的読みやすさ

  * １つのセクションで１つのものを説明する
  * 大項目から小項目へのブレークダウン
  * 単語→ページ数による参照(索引)

* ウェブ的な読みやすさ

  * スクロールで閲覧、探索
  * リンクによるナビゲーション
  * 検索
  * ページ内の相対的な重み付け（セクション、サブセクション）
  * 本は絶対的な位置関係からは切り離せない
  * ページ内で独立して、導入、説明という入れ子構造にしやすい（雑誌的構造）

神経ネットワーク
================

神経は「痛みを伝える」などの、それぞれの目的に特化した情報の経路を提供しています。

Sphinxでは、意味情報(セマンティクス)を使って、情報をつなげて行くことができます。「パーソナルな、はてな」と言うこともできるでしょう。トップダウンの構造に追加して、意味的な情報の流れを追加していけます。

基本的には、説明ユニットと、目次の2つで構成されています。

説明ユニット
------------------



Pythonであれば、モジュール、クラス、関数、メソッド、変数などです。詳細説明部
索引
説明ユニット
→定義、リンク
自分で新しいボキャブラリーセットを追加することができる。
Sphinxのドキュメントであれば、設定ファイルの説明用の説明ユニットを追加している。

西村京太郎→電車の時間、人

Oracleの場合：リファレンス、パフォーマンスチューニング、バックアップ、コツ
Pythonなどのプログラミング言語：チュートリアル、言語リファレンス、ライブラリリファレンス、C/APIなど。多くの情報が重層的に重なっている。

本が扱える情報はごく一部。１冊あたり、１コンテンツ。
Sphinxが狙っているのは、百科事典。このぐらいのボリュームの情報を扱うためのドキュメントツール。なので、本１冊程度であれば、余裕。むしろ、機能が使い切れなくて寂しいぐらい。

成長しやすい構造
部分部分から攻める人に最適
全体像から攻める人に最適
読みやすさを考えてコツコツしていく人に最適


(ここから先は勢いで押し切る)

１回説明しておしまい、というドキュメントであれば、余計な記号が少ないなどのメリット程度。うまみは少ない。

→そういうドキュメントは滅ぼしたい。なるべく多くの人に読まれる方がいいに決まっている。
→ドキュメントを書くのは人。人が働くとコストがかかる。
→１回しか使われない、とりあえずのドキュメントは滅んだ方がいい。とりあえず実装と時間そんなに変わらない。紙上で議論するよりは、残る物を使っていくようにした方がいい。
→仕様作成やドキュメントまでは無料といったって、ドキュメントを書く手間は変わらない。開発量に混ぜ込み。
コミコミ料金というと絶対発注側は損している。見積もり、ドキュメントをしっかり分けて、無駄なドキュメントを書かないように発注側、ユーザ側も気を付けるようにして、いかないとダメ。
コストを削るときは、細かく項目を分けていって、削っていく。まとめる＝無駄の温床。

→なるべく改良に時間もお金も投資していく。アジャイル開発。永和システムのモデルはとてもいいと思う。ユーザが改善にきちんとコミットする、という流れができればベスト。

「ドキュメントを書く」という行為そのものを考え直すきっかけになれば、と思う。Sphinx-Users.jpというコミュニティを作ったのも、そういう目的から。

ドキュメントを成長させるのが楽しい
→むしろ、成長させていく「仕事の流れ」を作ることが大事
→一度きり、というのは良くない。ソフトウェアもドキュメントも継続して進化というサイクルを作るべき。ドキュメントは必要悪ではない。

